// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: flashsale.proto

package flashsale

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlashsaleService_FrontFlashsale_FullMethodName = "/flashsale.FlashsaleService/FrontFlashsale"
)

// FlashsaleServiceClient is the client API for FlashsaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashsaleServiceClient interface {
	FrontFlashsale(ctx context.Context, in *FlashsaleReq, opts ...grpc.CallOption) (*GeneralResp, error)
}

type flashsaleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashsaleServiceClient(cc grpc.ClientConnInterface) FlashsaleServiceClient {
	return &flashsaleServiceClient{cc}
}

func (c *flashsaleServiceClient) FrontFlashsale(ctx context.Context, in *FlashsaleReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, FlashsaleService_FrontFlashsale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashsaleServiceServer is the server API for FlashsaleService service.
// All implementations must embed UnimplementedFlashsaleServiceServer
// for forward compatibility
type FlashsaleServiceServer interface {
	FrontFlashsale(context.Context, *FlashsaleReq) (*GeneralResp, error)
	mustEmbedUnimplementedFlashsaleServiceServer()
}

// UnimplementedFlashsaleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlashsaleServiceServer struct {
}

func (UnimplementedFlashsaleServiceServer) FrontFlashsale(context.Context, *FlashsaleReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontFlashsale not implemented")
}
func (UnimplementedFlashsaleServiceServer) mustEmbedUnimplementedFlashsaleServiceServer() {}

// UnsafeFlashsaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashsaleServiceServer will
// result in compilation errors.
type UnsafeFlashsaleServiceServer interface {
	mustEmbedUnimplementedFlashsaleServiceServer()
}

func RegisterFlashsaleServiceServer(s grpc.ServiceRegistrar, srv FlashsaleServiceServer) {
	s.RegisterService(&FlashsaleService_ServiceDesc, srv)
}

func _FlashsaleService_FrontFlashsale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlashsaleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashsaleServiceServer).FrontFlashsale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashsaleService_FrontFlashsale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashsaleServiceServer).FrontFlashsale(ctx, req.(*FlashsaleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashsaleService_ServiceDesc is the grpc.ServiceDesc for FlashsaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashsaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flashsale.FlashsaleService",
	HandlerType: (*FlashsaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FrontFlashsale",
			Handler:    _FlashsaleService_FrontFlashsale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flashsale.proto",
}
