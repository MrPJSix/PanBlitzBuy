// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: productevent.proto

package productevent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_AddProduct_FullMethodName             = "/productevent.ProductService/AddProduct"
	ProductService_DeleteProduct_FullMethodName          = "/productevent.ProductService/DeleteProduct"
	ProductService_GetProductList_FullMethodName         = "/productevent.ProductService/GetProductList"
	ProductService_GetProduct_FullMethodName             = "/productevent.ProductService/GetProduct"
	ProductService_GetSelectedProductList_FullMethodName = "/productevent.ProductService/GetSelectedProductList"
	ProductService_EditProduct_FullMethodName            = "/productevent.ProductService/EditProduct"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*GeneralResp, error)
	DeleteProduct(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GeneralResp, error)
	GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*GetProductListResp, error)
	GetProduct(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GetProductResp, error)
	GetSelectedProductList(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GetProductListResp, error)
	EditProduct(ctx context.Context, in *EditProductReq, opts ...grpc.CallOption) (*GeneralResp, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, ProductService_AddProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, ProductService_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*GetProductListResp, error) {
	out := new(GetProductListResp)
	err := c.cc.Invoke(ctx, ProductService_GetProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProduct(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GetProductResp, error) {
	out := new(GetProductResp)
	err := c.cc.Invoke(ctx, ProductService_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetSelectedProductList(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GetProductListResp, error) {
	out := new(GetProductListResp)
	err := c.cc.Invoke(ctx, ProductService_GetSelectedProductList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) EditProduct(ctx context.Context, in *EditProductReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, ProductService_EditProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	AddProduct(context.Context, *AddProductReq) (*GeneralResp, error)
	DeleteProduct(context.Context, *ProductGeneralReq) (*GeneralResp, error)
	GetProductList(context.Context, *GetProductListReq) (*GetProductListResp, error)
	GetProduct(context.Context, *ProductGeneralReq) (*GetProductResp, error)
	GetSelectedProductList(context.Context, *ProductGeneralReq) (*GetProductListResp, error)
	EditProduct(context.Context, *EditProductReq) (*GeneralResp, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) AddProduct(context.Context, *AddProductReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProduct(context.Context, *ProductGeneralReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) GetProductList(context.Context, *GetProductListReq) (*GetProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedProductServiceServer) GetProduct(context.Context, *ProductGeneralReq) (*GetProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductServiceServer) GetSelectedProductList(context.Context, *ProductGeneralReq) (*GetProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelectedProductList not implemented")
}
func (UnimplementedProductServiceServer) EditProduct(context.Context, *EditProductReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProduct not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AddProduct(ctx, req.(*AddProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductGeneralReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*ProductGeneralReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductList(ctx, req.(*GetProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductGeneralReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProduct(ctx, req.(*ProductGeneralReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetSelectedProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductGeneralReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetSelectedProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetSelectedProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetSelectedProductList(ctx, req.(*ProductGeneralReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_EditProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).EditProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_EditProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).EditProduct(ctx, req.(*EditProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productevent.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _ProductService_AddProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "GetProductList",
			Handler:    _ProductService_GetProductList_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductService_GetProduct_Handler,
		},
		{
			MethodName: "GetSelectedProductList",
			Handler:    _ProductService_GetSelectedProductList_Handler,
		},
		{
			MethodName: "EditProduct",
			Handler:    _ProductService_EditProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "productevent.proto",
}

const (
	EventService_AddEvent_FullMethodName          = "/productevent.EventService/AddEvent"
	EventService_GetEventList_FullMethodName      = "/productevent.EventService/GetEventList"
	EventService_GetEvent_FullMethodName          = "/productevent.EventService/GetEvent"
	EventService_EditEvent_FullMethodName         = "/productevent.EventService/EditEvent"
	EventService_DeleteEvent_FullMethodName       = "/productevent.EventService/DeleteEvent"
	EventService_GetFrontEventList_FullMethodName = "/productevent.EventService/GetFrontEventList"
	EventService_GetFrontEvent_FullMethodName     = "/productevent.EventService/GetFrontEvent"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	AddEvent(ctx context.Context, in *AddEventReq, opts ...grpc.CallOption) (*GeneralResp, error)
	GetEventList(ctx context.Context, in *GetEventListReq, opts ...grpc.CallOption) (*GetEventListResp, error)
	GetEvent(ctx context.Context, in *EventGeneralReq, opts ...grpc.CallOption) (*GetEventResp, error)
	EditEvent(ctx context.Context, in *EditEventReq, opts ...grpc.CallOption) (*GeneralResp, error)
	DeleteEvent(ctx context.Context, in *EventGeneralReq, opts ...grpc.CallOption) (*GeneralResp, error)
	GetFrontEventList(ctx context.Context, in *GetFrontEventListReq, opts ...grpc.CallOption) (*GetFrontEventListResp, error)
	GetFrontEvent(ctx context.Context, in *EventGeneralReq, opts ...grpc.CallOption) (*GetFrontEventResp, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) AddEvent(ctx context.Context, in *AddEventReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, EventService_AddEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEventList(ctx context.Context, in *GetEventListReq, opts ...grpc.CallOption) (*GetEventListResp, error) {
	out := new(GetEventListResp)
	err := c.cc.Invoke(ctx, EventService_GetEventList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEvent(ctx context.Context, in *EventGeneralReq, opts ...grpc.CallOption) (*GetEventResp, error) {
	out := new(GetEventResp)
	err := c.cc.Invoke(ctx, EventService_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) EditEvent(ctx context.Context, in *EditEventReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, EventService_EditEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEvent(ctx context.Context, in *EventGeneralReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	out := new(GeneralResp)
	err := c.cc.Invoke(ctx, EventService_DeleteEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetFrontEventList(ctx context.Context, in *GetFrontEventListReq, opts ...grpc.CallOption) (*GetFrontEventListResp, error) {
	out := new(GetFrontEventListResp)
	err := c.cc.Invoke(ctx, EventService_GetFrontEventList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetFrontEvent(ctx context.Context, in *EventGeneralReq, opts ...grpc.CallOption) (*GetFrontEventResp, error) {
	out := new(GetFrontEventResp)
	err := c.cc.Invoke(ctx, EventService_GetFrontEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	AddEvent(context.Context, *AddEventReq) (*GeneralResp, error)
	GetEventList(context.Context, *GetEventListReq) (*GetEventListResp, error)
	GetEvent(context.Context, *EventGeneralReq) (*GetEventResp, error)
	EditEvent(context.Context, *EditEventReq) (*GeneralResp, error)
	DeleteEvent(context.Context, *EventGeneralReq) (*GeneralResp, error)
	GetFrontEventList(context.Context, *GetFrontEventListReq) (*GetFrontEventListResp, error)
	GetFrontEvent(context.Context, *EventGeneralReq) (*GetFrontEventResp, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) AddEvent(context.Context, *AddEventReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvent not implemented")
}
func (UnimplementedEventServiceServer) GetEventList(context.Context, *GetEventListReq) (*GetEventListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventList not implemented")
}
func (UnimplementedEventServiceServer) GetEvent(context.Context, *EventGeneralReq) (*GetEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventServiceServer) EditEvent(context.Context, *EditEventReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEvent not implemented")
}
func (UnimplementedEventServiceServer) DeleteEvent(context.Context, *EventGeneralReq) (*GeneralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventServiceServer) GetFrontEventList(context.Context, *GetFrontEventListReq) (*GetFrontEventListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontEventList not implemented")
}
func (UnimplementedEventServiceServer) GetFrontEvent(context.Context, *EventGeneralReq) (*GetFrontEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontEvent not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_AddEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AddEvent(ctx, req.(*AddEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEventList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEventList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventList(ctx, req.(*GetEventListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventGeneralReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEvent(ctx, req.(*EventGeneralReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_EditEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).EditEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_EditEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).EditEvent(ctx, req.(*EditEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventGeneralReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEvent(ctx, req.(*EventGeneralReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetFrontEventList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontEventListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetFrontEventList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetFrontEventList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetFrontEventList(ctx, req.(*GetFrontEventListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetFrontEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventGeneralReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetFrontEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetFrontEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetFrontEvent(ctx, req.(*EventGeneralReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productevent.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEvent",
			Handler:    _EventService_AddEvent_Handler,
		},
		{
			MethodName: "GetEventList",
			Handler:    _EventService_GetEventList_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _EventService_GetEvent_Handler,
		},
		{
			MethodName: "EditEvent",
			Handler:    _EventService_EditEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventService_DeleteEvent_Handler,
		},
		{
			MethodName: "GetFrontEventList",
			Handler:    _EventService_GetFrontEventList_Handler,
		},
		{
			MethodName: "GetFrontEvent",
			Handler:    _EventService_GetFrontEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "productevent.proto",
}
