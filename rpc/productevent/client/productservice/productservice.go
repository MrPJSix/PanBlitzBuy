// Code generated by goctl. DO NOT EDIT.
// Source: productevent.proto

package productservice

import (
	"context"

	"pan-blitz-buy/rpc/productevent/productevent"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddEventReq           = productevent.AddEventReq
	AddProductReq         = productevent.AddProductReq
	EditEventReq          = productevent.EditEventReq
	EditProductReq        = productevent.EditProductReq
	EventDetailedInfo     = productevent.EventDetailedInfo
	EventGeneralReq       = productevent.EventGeneralReq
	EventInfo             = productevent.EventInfo
	FrontEventInfo        = productevent.FrontEventInfo
	GeneralResp           = productevent.GeneralResp
	GetEventListReq       = productevent.GetEventListReq
	GetEventListResp      = productevent.GetEventListResp
	GetEventResp          = productevent.GetEventResp
	GetFrontEventListReq  = productevent.GetFrontEventListReq
	GetFrontEventListResp = productevent.GetFrontEventListResp
	GetFrontEventResp     = productevent.GetFrontEventResp
	GetProductListReq     = productevent.GetProductListReq
	GetProductListResp    = productevent.GetProductListResp
	GetProductResp        = productevent.GetProductResp
	ProductGeneralReq     = productevent.ProductGeneralReq
	ProductInfo           = productevent.ProductInfo

	ProductService interface {
		AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*GeneralResp, error)
		DeleteProduct(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GeneralResp, error)
		GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*GetProductListResp, error)
		GetProduct(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GetProductResp, error)
		GetSelectedProductList(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GetProductListResp, error)
		EditProduct(ctx context.Context, in *EditProductReq, opts ...grpc.CallOption) (*GeneralResp, error)
	}

	defaultProductService struct {
		cli zrpc.Client
	}
)

func NewProductService(cli zrpc.Client) ProductService {
	return &defaultProductService{
		cli: cli,
	}
}

func (m *defaultProductService) AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	client := productevent.NewProductServiceClient(m.cli.Conn())
	return client.AddProduct(ctx, in, opts...)
}

func (m *defaultProductService) DeleteProduct(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	client := productevent.NewProductServiceClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}

func (m *defaultProductService) GetProductList(ctx context.Context, in *GetProductListReq, opts ...grpc.CallOption) (*GetProductListResp, error) {
	client := productevent.NewProductServiceClient(m.cli.Conn())
	return client.GetProductList(ctx, in, opts...)
}

func (m *defaultProductService) GetProduct(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GetProductResp, error) {
	client := productevent.NewProductServiceClient(m.cli.Conn())
	return client.GetProduct(ctx, in, opts...)
}

func (m *defaultProductService) GetSelectedProductList(ctx context.Context, in *ProductGeneralReq, opts ...grpc.CallOption) (*GetProductListResp, error) {
	client := productevent.NewProductServiceClient(m.cli.Conn())
	return client.GetSelectedProductList(ctx, in, opts...)
}

func (m *defaultProductService) EditProduct(ctx context.Context, in *EditProductReq, opts ...grpc.CallOption) (*GeneralResp, error) {
	client := productevent.NewProductServiceClient(m.cli.Conn())
	return client.EditProduct(ctx, in, opts...)
}
