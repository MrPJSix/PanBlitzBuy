// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	admin "pan-blitz-buy/api/internal/handler/admin"
	event "pan-blitz-buy/api/internal/handler/event"
	falshsale "pan-blitz-buy/api/internal/handler/falshsale"
	product "pan-blitz-buy/api/internal/handler/product"
	user "pan-blitz-buy/api/internal/handler/user"
	"pan-blitz-buy/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/email/send",
				Handler: user.UserEmailSendHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: user.UserRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: user.UserLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: admin.AdminLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/list",
				Handler: admin.AdminGetUsersHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/admin"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: product.ProductListGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: product.ProductInfoAddHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: product.ProductInfoGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/info",
				Handler: product.ProductInfoUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/info",
				Handler: product.ProductInfoDeleteHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/product"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/front/ordering",
				Handler: falshsale.FlashSaleOrderingGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/front/result",
				Handler: falshsale.FlashSaleResultGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/falshsale"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/products",
				Handler: event.EventProductsGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: event.EventListGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: event.EventInfoGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: event.EventInfoAddHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/info",
				Handler: event.EventInfoUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/info",
				Handler: event.EventInfoDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/front/list",
				Handler: event.FrontEventListGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/front/info",
				Handler: event.FrontEventInfoGetHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/event"),
	)
}
